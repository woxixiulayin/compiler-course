// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("rescript/lib/js/string.js");
var Caml_string = require("rescript/lib/js/caml_string.js");

function isDigit(ch) {
  return /[0-9]/.test(ch);
}

function isAlpha(ch) {
  return /[a-zA-Z]/.test(ch);
}

var currentTokenType = {
  contents: /* Identity */0
};

var currentTokenText = {
  contents: ""
};

function handleInitial(ch) {
  currentTokenText.contents = ch;
  if (isAlpha(ch)) {
    currentTokenType.contents = /* Identity */0;
    return /* ID */1;
  } else if (isDigit(ch)) {
    currentTokenType.contents = /* IntLitera */1;
    return /* IntLitera */4;
  } else if (ch === ">") {
    currentTokenType.contents = /* GE */3;
    return /* GE */3;
  } else {
    return /* ID */1;
  }
}

function parse(input) {
  var current = 0;
  var state = /* GT */2;
  var len = input.length;
  while(current < len) {
    var ch = $$String.make(1, Caml_string.get(input, current));
    var match = state;
    if (match !== 0) {
      throw {
            RE_EXN_ID: "Match_failure",
            _1: [
              "Demo.res",
              48,
              13
            ],
            Error: new Error()
          };
    }
    state = handleInitial(ch);
    current = current + 1 | 0;
  };
  
}

exports.isDigit = isDigit;
exports.isAlpha = isAlpha;
exports.currentTokenType = currentTokenType;
exports.currentTokenText = currentTokenText;
exports.handleInitial = handleInitial;
exports.parse = parse;
/* No side effect */
