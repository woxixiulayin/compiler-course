// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function isDigit(ch) {
  return /[0-9]/.test(ch);
}

function isAlpha(ch) {
  return /[a-zA-Z]/.test(ch);
}

function handleInitial(ch) {
  if (isDigit(ch)) {
    return "IntLiteral";
  }
  switch (ch) {
    case " " :
        return "Initial";
    case "=" :
        return "Assign";
    case ">" :
        return "GT";
    default:
      return "Identity";
  }
}

function handleId(ch) {
  if (ch === " ") {
    return "Initial";
  } else {
    return "Identity";
  }
}

function handleGT(ch) {
  switch (ch) {
    case " " :
        return "Initial";
    case "=" :
        return "GE";
    default:
      return "Initial";
  }
}

function handleGE(ch) {
  return "Initial";
}

function handleIntLiteral(ch) {
  if (isDigit(ch)) {
    return "IntLiteral";
  } else {
    return "Initial";
  }
}

function handleAssign(ch) {
  return "Initial";
}

function parse(input) {
  var len = input.length;
  var curIndex = 0;
  var currentContent = "";
  var lastState = "Initial";
  while(curIndex <= len) {
    var ch = input[curIndex];
    var match = lastState;
    var currentState = match === "GE" ? handleGE(ch) : (
        match === "GT" ? handleGT(ch) : (
            match === "Assign" ? "Initial" : (
                match === "Identity" ? handleId(ch) : (
                    match === "Initial" ? handleInitial(ch) : handleIntLiteral(ch)
                  )
              )
          )
      );
    if (currentState === "Initial" && lastState !== "Initial") {
      console.log(currentContent + " " + lastState);
      currentContent = "";
    } else {
      currentContent = currentContent + ch;
    }
    curIndex = curIndex + 1 | 0;
    lastState = currentState;
  };
  
}

parse("int age = 1222");

exports.isDigit = isDigit;
exports.isAlpha = isAlpha;
exports.handleInitial = handleInitial;
exports.handleId = handleId;
exports.handleGT = handleGT;
exports.handleGE = handleGE;
exports.handleIntLiteral = handleIntLiteral;
exports.handleAssign = handleAssign;
exports.parse = parse;
/*  Not a pure module */
