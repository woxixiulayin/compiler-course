// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$String = require("rescript/lib/js/string.js");
var Caml_string = require("rescript/lib/js/caml_string.js");

function isDigit(ch) {
  return /[0-9]/.test(ch);
}

function isAlpha(ch) {
  return /[a-zA-Z]/.test(ch);
}

function handleInitial(ch, param) {
  if (isDigit(ch)) {
    return [
            /* IntLitera */4,
            {
              tokenType: /* IntLitera */1,
              text: ch
            }
          ];
  } else if (ch === ">") {
    return [
            /* GT */2,
            {
              tokenType: /* GT */2,
              text: ch
            }
          ];
  } else {
    return [
            /* ID */1,
            {
              tokenType: /* Identity */0,
              text: ch
            }
          ];
  }
}

function handleId(ch, token) {
  if (ch === " ") {
    return [
            /* Initial */0,
            token
          ];
  } else {
    return [
            /* ID */1,
            {
              tokenType: /* Identity */0,
              text: token.text + ch
            }
          ];
  }
}

function handleGT(ch, token) {
  switch (ch) {
    case " " :
        return [
                /* Initial */0,
                token
              ];
    case "=" :
        return [
                /* GE */3,
                {
                  tokenType: /* GE */3,
                  text: token.text + ch
                }
              ];
    default:
      return [
              /* Initial */0,
              token
            ];
  }
}

function handleGE(ch, token) {
  return [
          /* Initial */0,
          token
        ];
}

function handleIntLitera(ch, token) {
  if (isDigit(ch)) {
    return [
            /* IntLitera */4,
            {
              tokenType: /* IntLitera */1,
              text: token.text + ch
            }
          ];
  } else {
    return [
            /* Initial */0,
            token
          ];
  }
}

function parse(input) {
  var len = input.length;
  var curIndex = 0;
  var curState = /* Initial */0;
  var curToken = {
    tokenType: /* Identity */0,
    text: ""
  };
  while(curIndex < len) {
    var ch = $$String.make(1, Caml_string.get(input, curIndex));
    var match = curState;
    var handler;
    switch (match) {
      case /* Initial */0 :
          handler = handleInitial;
          break;
      case /* ID */1 :
          handler = handleId;
          break;
      case /* GT */2 :
          handler = handleGT;
          break;
      case /* GE */3 :
          handler = handleGE;
          break;
      case /* IntLitera */4 :
          handler = handleIntLitera;
          break;
      
    }
    var match$1 = Curry._2(handler, ch, curToken);
    curState = match$1[0];
    curToken = match$1[1];
    curIndex = curIndex + 1 | 0;
    if (curState === /* Initial */0) {
      console.log(curToken);
    }
    
  };
  
}

parse("a = 1");

exports.isDigit = isDigit;
exports.isAlpha = isAlpha;
exports.handleInitial = handleInitial;
exports.handleId = handleId;
exports.handleGT = handleGT;
exports.handleGE = handleGE;
exports.handleIntLitera = handleIntLitera;
exports.parse = parse;
/*  Not a pure module */
